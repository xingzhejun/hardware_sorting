module merge_sorter_tb;
    
    // module SortingNetwork (
    // input wire [511:0] data_in,     // 16*32bit, is splitted afterward
    // input wire clk,                 // posedge triggered
    // input wire ena,                 // enable sorting
    // input wire rst,                 // reset when rst == 1
    // output reg [511:0] data_out,    // 16*32bit, is splitted afterward
    // output wire valid               // data_out is valid after 12 clock cycles enabled 
    // );
    reg [4095:0] test;
    wire [511:0] test1, test2, test3, test4, test5, test6, test7, test8; 
    assign {test1, test2, test3, test4, test5, test6, test7, test8} = test;

    reg clk;
    reg rst;


    wire s_rst;
    reg s_ena;
    // reg [31:0] data_in [15:0];
    reg [511:0] s_din;

    // assign s_din = {data_in[0], data_in[1], data_in[2], data_in[3], data_in[4], data_in[5], 
    //                 data_in[6], data_in[7], data_in[8], data_in[9], data_in[10], data_in[11],
    //                 data_in[12], data_in[13], data_in[14], data_in[15]};

    wire [511:0] s_dout;
    wire s_valid;

    SortingNetwork sorting_network(.data_in(s_din), .clk(clk), .ena(s_ena), 
                                    .rst(s_rst), .data_out(s_dout), .valid(s_valid));

    
    // module InputModule (
    // input wire [511:0] din,     // sorting network output
    // input wire clk, 
    // input wire rst, 
    // input wire valid,           // sorting network output valid
    // input wire full,            // merge sorter tree input buffer is full
    // output wire [31:0] im_dout,    // this module's data output
    // output wire ib_enq, 
    // output wire req             // data request
    // );

    reg [7:0] im_ena;
    wire im_rst;
    wire [7:0] ib_full;
    wire [31:0] im_dout [0:7];
    wire [7:0] ib_enq;
    wire [7:0] im_req;


    InputModule input_module_0(s_dout, clk, im_rst, s_valid && im_ena[0], ib_full[0], im_dout[0], ib_enq[0], im_req[0]);
    InputModule input_module_1(s_dout, clk, im_rst, s_valid && im_ena[1], ib_full[1], im_dout[1], ib_enq[1], im_req[1]);
    InputModule input_module_2(s_dout, clk, im_rst, s_valid && im_ena[2], ib_full[2], im_dout[2], ib_enq[2], im_req[2]);
    InputModule input_module_3(s_dout, clk, im_rst, s_valid && im_ena[3], ib_full[3], im_dout[3], ib_enq[3], im_req[3]);
    InputModule input_module_4(s_dout, clk, im_rst, s_valid && im_ena[4], ib_full[4], im_dout[4], ib_enq[4], im_req[4]);
    InputModule input_module_5(s_dout, clk, im_rst, s_valid && im_ena[5], ib_full[5], im_dout[5], ib_enq[5], im_req[5]);
    InputModule input_module_6(s_dout, clk, im_rst, s_valid && im_ena[6], ib_full[6], im_dout[6], ib_enq[6], im_req[6]);
    InputModule input_module_7(s_dout, clk, im_rst, s_valid && im_ena[7], ib_full[7], im_dout[7], ib_enq[7], im_req[7]);

    // module MergeSorterTree (
    // input wire [255:0] din,     // 8*32bit
    // input wire enq [0:7],       // select which way to enqueue
    // input wire clk,             // posedge
    // input wire irst,            // input buffer reset
    // input wire frst,            // fifo reset
    // input wire deq,             // dequeue this tree
    // output wire [31:0] dout,
    // output wire full [0:7],     // this tree is full
    // output wire empty           // this tree (f01 node) is empty
    // );

    wire irst, frst;
    reg t_deq;
    wire [31:0] t_dout;
    wire t_empty;
    wire [255:0] t_din;

    assign t_din = {im_dout[0], im_dout[1], im_dout[2], im_dout[3], im_dout[4], im_dout[5], im_dout[6], im_dout[7]};

    MergeSorterTree merge_sorter_tree(.din(t_din), .enq(ib_enq), .clk(clk), .irst(irst), .frst(frst),
                                    .deq(t_deq), .dout(t_dout), .full(ib_full), .empty(t_empty));


    // ///

    assign s_rst = rst;
    assign im_rst = rst;
    assign irst = rst;
    assign frst = rst;
    assign ib_full = 0;

    initial begin
        test = 4096'b
        clk = 0;
        rst = 0;
        s_ena = 0;
        im_ena = 0;
        s_din = 0;
        t_deq = 0;

        // reset
        #100 rst = 1;
        #10 rst = 0;
        #10
        s_din = test1;
        s_ena = 1;
        im_ena = 8'b00000001;

        #70
        s_din = test2;
        #20
        im_ena = 8'b00000010;

        #70
        s_din = test3;
        #20
        im_ena = 8'b00000100;

        #70
        s_din = test4;
        #20
        im_ena = 8'b00001000;

        #70
        s_din = test5;
        #20
        im_ena = 8'b00010000;
        
        #70
        s_din = test6;
        #20
        im_ena = 8'b00100000;
        
        #70
        s_din = test7;
        #20
        im_ena = 8'b01000000;
        
        #70
        s_din = test8;
        #20
        im_ena = 8'b10000000;

        #70
        im_ena = 8'b00000000;

        #100
        t_deq = 1;

        #100 $finish;
    end
    
    always begin
        #1 clk = ~clk;
    end

endmodule